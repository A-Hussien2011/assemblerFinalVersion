Read Symbol Table in SymbolTable class
Read Literal table in LitTable class

instantiate from RegistersTable class (RegistersTable registers;)
instantiate from Format class (Format format;)
instantiate from OperandIdentifier class (OperandIdentifier identify(symbolTable, LiteralTable);)

Read line from pass1 output file

get lable
get operand
get operation
get address
get operation format
get operandType

if (format = 2) {
	r1Number = registers.getRegisterNumber(r1); //r1 should be read as operand from above
	r2Number = registers.getRegisterNumber(r2); //r2 should be read as operand from above
	format.setRegister1(r1);
	format.setRegister2(r2);
	format.getObjectCode(); //save object code in a vector or so


} else if (operation = WORD/BYTE) {
	getWordObjectCode(operand); 
	or
	getByteObjectCode(operand);
	//both methods are in a folder called 'methods to be put in contorller' and they should be added here 
	//these methods don't belong to a class

	
} else if (label = '*') { //it means this is a literal as literals are added to the output file from pass1 
	getObjectCode(literalTable.getAddress(operation)); 
	// line of a literal is as follows (01001	*	C'EOF'	454745) (address  astric  literalName  Ascii code)

} else {
	if ((operandType = symbol, indexed symbol, immediate symbol, indirect symbol, simple expression, complex expression) 
			&& symbolTable.getSymbolType(operand) == 'U') {
			setSymbolType(operand); //this method is in a folder called 'methods to be put in contorller'
			if (symbolTable.getSymbolType(operand) == 'U') {
				//error in line (when a symbol type is undefined then it has an undefined symbol in its expression
			}
	}
	identify.setOperand(operand);
	string address = identify.getAddress();
	if (address == "") { //then there's an error either symbol doesn't exist or invalid expression
		if (!identify.isValidExpression()) {
			//then write error msg the expression is invalid
		} else {
		
			//then symbol is not found in table error msg
		}
	} else {
		if (formatType == 3) {
			address = //from class bassant get displacement
		}
		format.setNFlag(identify.getNflag());
		format.setIFlag(identify.getIflag());
		format.setXFlag(identify.getXflag());
		format.setPCFlag(from class bassant);
		format.setCFlag(from class bassant);
		format.setAddress/Dispalcement(address);
		format.getObjectCode();
	}
}

(((((missing start and end ))))))